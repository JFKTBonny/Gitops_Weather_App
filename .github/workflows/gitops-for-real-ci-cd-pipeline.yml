name: 'Terraform Plan/Apply on AWS'

on:
  push:
    branches:
      - main
    paths-ignore:
      - './deployment/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - './deployment/**'

env:
  ENVIRONMENT: dev
  TERRAFORM_VERSION: 1.8.3
  

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

        

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.BACKEND_BUCKET }}" \
            -backend-config="key=gitops-weather-app/${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            --reconfigure
        working-directory: ${{ github.workspace }}/terraform

      - name: Terraform Plan
        id: tf-plan      
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out=weather-app-tf.plan || export exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed!"
            exit 1
          fi
        working-directory: ${{ github.workspace }}/terraform

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: weather-app-tf.plan
          path: ${{ github.workspace }}/terraform
          

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform-plan]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }} 

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.BACKEND_BUCKET }}" \
            -backend-config="key=gitops-weather-app/${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            --reconfigure
        working-directory: ${{ github.workspace }}/terraform

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: weather-app-tf.plan
          path: ${{ github.workspace }}/terraform

      
      - name: Apply Terraform Plan
        run: terraform apply   -auto-approve  ${{ github.workspace }}/terraform/weather-app-tf.plan
        working-directory: ${{ github.workspace }}/terraform

  docker-build-and-push:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: Dockerfile            # Capitalized filename "Dockerfile"
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/weather-app-backend-api:v${{ github.sha }}

      - name: Update Kubernetes Manifests
        run: |
          cd ./deployment
          sed -i 's|image: .*$|image: ${{ secrets.DOCKERHUB_USERNAME }}/weather-app-backend-api:v${{ github.sha }}|' backend-api-deployment.yaml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Update image tag to v${{ github.sha }}"
          git push

      

  argo-cd-deployment:
    name: 'Setup ArgoCD on EKS'
    runs-on: ubuntu-latest
    needs: [docker-build-and-push, terraform-apply]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl and plugins

        uses: marcofranssen/setup-kubectl@v1.3.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}   

      # # Configure kubeconfig for EKS
      # - name: Update kubeconfig for EKS
      #   run: aws eks update-kubeconfig \
      #         --name gitops-${{ env.ENVIRONMENT }}-cluster \
      #         --region ${{ secrets.AWS_REGION }}

      # Fixed: environment is set as a normal secret, used here correctly
      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name gitops-${{ env.ENVIRONMENT }}-cluster --region ${{ secrets.AWS_REGION }}

      - name: Setup ArgoCD
        run: |
          cd ./scripts

          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

          chmod +x get-argo-cd-external-ip.sh
          source get-argo-cd-external-ip.sh

          chmod +x get-argo-cd-initial-password.sh
          source get-argo-cd-initial-password.sh

          argocd login $EXTERNAL_IP --username admin --password $ARGO_CD_PASSWORD --insecure

          argocd repo add https://github.com/JFKTBonny/Gitops_Weather_App.git \
            --username ${{ secrets.REPO_USER }} \
            --password ${{ secrets.REPO_TOKEN }}

      - name: Deploy ArgoCD Application
        run: |
          cd ./ArgoCD-GitOps
          kubectl create namespace weather-app-for-real --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f argocd_deployment.yaml